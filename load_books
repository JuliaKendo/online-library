import os
import re
import requests
from bs4 import BeautifulSoup
from pathvalidate import sanitize_filename


def get_book_title(url, book_id):
    book_url = f'{url}/b{book_id}/'
    response = requests.get(book_url)
    response.raise_for_status()
    assert book_url == response.url, 'Отсутствует книга на сайте'
    soup = BeautifulSoup(response.text, 'lxml')
    title_tag = soup.find('div', id='content').find('h1')
    if title_tag:
        book_name, book_author = re.findall(r'^(.*?)\s::(.*)', title_tag.text)[0]
        return {
            'name': book_name.strip(),
            'author': book_author.strip()
        }


def get_filename(url, book_id):
    book_title = get_book_title(url, book_id)
    filename = '%s.%s.txt' % (book_id, book_title['name'])
    return sanitize_filename(filename)


def download_txt(url, filename, book_id, folder='books/'):
    response = requests.get(f'{url}/txt.php', params={'id': book_id})
    response.raise_for_status()

    os.makedirs(folder, exist_ok=True)
    filename = os.path.join(folder, filename)
    with open(filename, 'w') as file:
        file.write(response.text)

    return filename


def main():
    url = 'http://tululu.org'
    for book_id in range(1, 11):
        try:
            filename = get_filename(url, book_id)
            filepath = download_txt(url, filename, book_id)
            print(filepath)
        except AssertionError:
            continue


if __name__ == "__main__":
    main()
